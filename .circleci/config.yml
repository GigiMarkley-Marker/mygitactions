# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

commands:
  failure:
    description: Retry a step when it fails
    parameters:
      repo:
        type: string
        default: ""
      when:
        type: string
        default: "on_fail"

    steps:
      - run:
          command: |
            echo "This ran because the previous step failed"
            echo "<<parameters.when>>"
          name: step due to failure
          when: <<parameters.when>>

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:
  test-backend:
    docker:
      - image: cimg/base:current
    steps:
      - checkout
      - run:
          name: "Test backend"
          command: "echo Testing backend"
          # Force a failure
      - run: exit 1
      - failure:
          repo: "TEST"
          when: "on_fail"
  test-frontend:
    docker:
      - image: cimg/base:current
    steps:
      - checkout
      - run:
          name: "Test frontend"
          command: "echo Testing frontend"
  system-checks:
    docker:
      - image: cimg/base:current
    steps:
      - checkout
      - run:
          name: "Test system checks"
          command: "echo Testing system checks"

  setup-failure:
    docker:
      - image: cimg/base:current
    steps:
      - checkout
      - run:
          name: "Failure of the setup stage"
          command: "echo Failure of the setup stage"

  dev-build:
    docker:
      - image: cimg/base:current
    steps:
      - checkout
      - run:
          name: "Test dev build"
          command: "echo Testing dev build"

  dev-deploy:
    docker:
      - image: cimg/base:current
    steps:
      - checkout
      - run:
          name: "Test dev deploy"
          command: "echo Testing dev deploy"

  staging-build:
    docker:
      - image: cimg/base:current
    steps:
      - checkout
      - run:
          name: "Test staging build"
          command: "echo Testing staging build"

  staging-deploy:
    docker:
      - image: cimg/base:current
    steps:
      - checkout
      - run:
          name: "Test staging deploy"
          command: "echo Testing staging deploy"

  prod-build:
    docker:
      - image: cimg/base:current
    steps:
      - checkout
      - run:
          name: "Test prod build"
          command: "echo Testing prod build"

  prod-deploy:
    docker:
      - image: cimg/base:current
    steps:
      - checkout
      - run:
          name: "Test prod deploy"
          command: "echo Testing prod deploy"

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
workflows:
  dev-staging-prod-single-workflow:
    jobs:
      # - test-backend:
      #   on_fail:
      #     - setup-failure
      # - test-frontend:
      #   on_fail:
      #     - setup-failure
      # - system-checks:
      #   on_fail:
      #     - setup-failure
      # - dev-build:
      #     requires:
      #       - test-backend
      #       - test-frontend
      #       - system-checks
      # - dev-deploy:
      #     requires:
      #       - dev-build
      # - staging-build:
      #     requires:
      #       - dev-deploy
      # - staging-deploy:
      #     requires:
      #       - staging-build
      # - prod-build:
      #     type: approval
      #     requires:
      #       - staging-deploy
      # - prod-deploy:
      #     requires:
      #       - prod-build

      - stage-1:
          jobs:
            - test-backend
            - test-frontend
            - system-checks
      - stage-2:
          jobs:
            - dev-build
            - dev-deploy
      - stage-3:
          jobs:
            - staging-build
            - staging-deploy
      - stage-4:
          jobs:
            - prod-build
            - prod-deploy
